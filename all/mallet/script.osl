brushes = []
entities = []

if window.permissions.contains("save admin").not() (
  permission "request" "save admin"
)

def "setdefaults" (
  do_win_buttons = true
  do_sidebar = true
  do_topbar = true
  do_topbar_mouse_pos = true
  do_topbar_fps = true
  topbar_text = "Mallet - untitled.map"
)
setdefaults

state = "main"

topbar_text = "Mallet - untitled.map"

tools = [
  ["empty","Empty","n",1.7,"w 4 c #f00 dot 10 10 dot -10 10 dot -10 -10 dot 10 -10 w 1 c #999 line -10 -5 -10 -2 line -10 5 -10 2 line 10 -5 10 -2 line 10 5 10 2 line -5 -10 -2 -10 line 5 -10 2 -10 line -5 10 -2 10 line 5 10 2 10"],
  ["entity","Entity","e",2.3,"c #ffc200 w 10 dot 0 3.2 w 2 line -2 -1 -2 -3 line 2 -1 2 -3 w 4 line 0 -1 0 -3 w .4 c #c67700 cutcircle 1.5 2 .9 4 125 cutcircle -1.5 2 .9 -4 125 line -.6 2 -.6 -4 line .6 2 .6 -4 line -1.6 1.1 1.6 1.1 w 3 c #585858 dot 0 -6.8 w 1.1 c #7b7b7b line -2 -4.5 2 -4.5 w 1.5 line -1.8 -4.7 -1.8 -7 line 1.8 -4.7 1.8 -7 line -1.8 -7 1.8 -7 w 3 dot 0 -6 w .75 c #585858 line -2.4 -5 2.4 -5 line -2.4 -6.5 2.4 -6.5"],
  ["brush","Brush","b",1.7,"c #fff w 2 line 0 -10 0 2 line -9.5 -6 -9.5 6 line 9.5 -6 9.5 6 line -9.5 6 0 2 line 0 2 9.5 6 line -9.5 6 0 10 line 9.5 6 0 10 line -9.5 -6 0 -10 line 0 -10 9.5 -6"],
  ["texture","Texture","t",1.7,"c #d7d7d9 w 2 square 0 0 10 10 w 9 square 0 0 6 6 dot 0 0 c #bd5b3e w 2.75 square -5.3 8 3.5 .75 square 5.3 8 3.5 .75 square -8 2.5 1 .75 square 0 2.5 3.5 .75 square 8 2.5 1 .75 square -5.3 -2.5 3.5 .75 square 5.3 -2.5 3.5 .75 square -8 -8 1 .75 square 0 -8 3.5 .75 square 8 -8 1 .75"]
]
def "clear_data" (
  sidebar_authors = {}
  sidebar = []
  tools = []
  entity_types = {}
  textures = {}
)

textures = {}
entity_types = {}

logs = []

icon_mallet = "w 20 c #d23a3a dot 0 0 w 2 c #2b2b2b line 6 -6 0 0 line 5 -7 7 -5 line 5 -7 2 -4 cont 2.5 -3.5 cont -1.5 0.5 line 7 -5 4 -2 cont 3.5 -2.5 cont -0.5 1.5 w 2 line -4.5 -1.5 1.5 4.5 line -4.5 -1.5 -7.5 1.5 line 1.5 4.5 -1.5 7.5 line -7.5 1.5 -1.5 7.5 w 3 line -5 1 -1 5"
icon_addon = "c #881bbf w 6 square 0 -2 5 6 square -2 3 3 5 dot 0 -3 w 3 c #6d1499 line 2 9.5 6.5 5 cont 2 5 cont 2 9.5 w 1.5 c #fff line -3.25 -1 -5.75 -4 cont -3.25 -7 line 3.25 -1 5.75 -4 cont 3.25 -7 line -2.5 -4 2.5 -4 line 0 -6.5 0 -1.5"
def "loadtheme" (
  primary = user.theme.primary
  secondary = user.theme.secondary
  tertiary = user.theme.tertiary
  text = user.theme.text
  background = user.theme.background
)

import "window_tools"
//seticon icon_mallet
window "dimensions" 1100 700
window "set_dragbox" [[2,2,0,0],[-2,2,-90,-42]]

minimised_text = "Mallet"
save_dir = "mallet@flufi"

permission "request" "file admin"
permission "request" "start run"

file "install_type" "map" icon_mallet "Map File" []
file "use_type" "map"
file "install_type" "addon" icon_addon "Addon File" ["studio"]

if passed_Data == "SYS.onboot" (
  window "stop"
)

def "newTool" "id,name,hotkey,icn_size,icn" (
  t = [id,name,hotkey,icn_size,icn]
  void tools.append(t)
)

def "newEntity" "id,params" (
  e = {}
  e["params"] = params
  entity_types[id] = e
)

def "newSidebar" "id,name" (
  do = true
  each sidebaritemi sidebaritem sidebar (
    if sidebaritem[1] == name (
      do = false
    )
  )
  if do (
    s = [id,name]
    void sidebar.append(s)
    sidebar_authors[id] = addon
  )
)

def "newSidebarIcn" "id,name,size,icn" (
  do = true
  each sidebaritemi sidebaritem sidebar (
    if sidebaritem[1] == name (
      do = false
    )
  )
  if do (
    s = [id,name,icn,size]
    void sidebar.append(s)
    sidebar_authors[id] = addon
  )
)

def "newTexture" "id,url" (
  textures[id] = url
)

def "runaddon" "addon,func" (
  run "" + addons[addon]["scripts"][func]
)

def "eventaddon" "func" (
  each addoni addon addons.getKeys() (
    if addons[addon]["scripts"].getKeys().contains(func) (
      runaddon addon func
    )
  )
)

includebase = false
def "installdefaultaddons" (
  save save_dir "set_directory"
  save "mallet.addon" "exists"
  if save_data.not() (; installmalletaddon; )
  save "core.addon" "exists"
  if save_data.not() (; installcoreaddon; )
  save "marketplace.addon" "exists"
  if save_data.not() (; installmarketplaceaddon; )
  if includebase (
    save "base.addon" "exists"
    if save_data.not() (; installbaseaddon; )
  )
)

def "installmalletaddon" (
  data = "https://raw.githubusercontent.com/ThePandaDever/mallet/main/mallet.addon".get()
  save "mallet.addon" "set" data
)

def "installmarketplaceaddon" (
  data = "https://raw.githubusercontent.com/ThePandaDever/mallet/main/marketplace.addon".get()
  save "marketplace.addon" "set" data
)

def "installcoreaddon" (
  data = "https://raw.githubusercontent.com/ThePandaDever/mallet/main/core.addon".get()
  save "core.addon" "set" data
)

def "installbaseaddon" (
  data = "https://raw.githubusercontent.com/ThePandaDever/mallet/main/base.addon".get()
  save "base.addon" "set" data
)

def "loadfiles" (
  addons = {}
  addonnames = []
  save "mallet@flufi" "set_directory"
  clear_data
  loadtheme
  if save_data == "Success" (
    // files
    save "settings.cfg" "exists"
    if save_data == false (
      save "settings.cfg" "set" {"sidebar":{"expanded":[]},"onboarding":false}
    )

    save "addons.cfg" "exists"
    if save_data == false (
      save "addons.cfg" "set" {"disabledaddons":[]}
    )
    save "addons.cfg" "get"
    disabledaddons = save_data.JsonParse()["disabledaddons"]

    save "contents"
    files = save_data
    each filei file files (
      filetokens = file.split(".")
      save file "get"
      filedata = save_data
      if filetokens[2] == "cfg" (
        if filetokens[1] == "settings" (
          settings = filedata
          each expi exp settings.sidebar.expanded (
            sidebarexpanded[exp] = true
          )
        )
        if filetokens[1] == "addons" (
          addon_settings = filedata.JsonParse()
        )
      )
      if filetokens[2] == "addon" (
        if disabledaddons.contains(filetokens[1]).not() (
          // temp fix
          //addons[filetokens[1]] = filedata.destr
          addons[filetokens[1]] = filedata.replace("\n","").JsonParse()
          runaddon filetokens[1] "load"
        )
        void addonnames.append(filetokens[1])
      )
    )
  ) else (
    say "Fatal Error:" + save_data
    window "stop"
  )
  if textures.getKeys().contains(current_texture).not() or current_texture == "" (
    current_texture = textures.getKeys()[1]
  )
  eventaddon "late_load"
)

assetqueue = []
def "loadassetfiletovariablenamewithflags" "path,variable,flags" (
  assetqueue.append([path,variable,flags])
)

scale = 10
sidebarexpanded = {}

out = false
def "getx" "x" (
  out = x - camera_x * scale
)

def "gety" "y" (
  out = y - camera_y * scale
)

def getx(x) (
  getx x
  return out
)

def gety(y) (
  gety y
  return out
)

def ungetx(x) (
  return x / scale + camera_x
)

def ungety(y) (
  return y / scale + camera_y
)

def sinsmooth(x) (
  x = x * 360
  if x + 90 < -90 (; return 0; )
  if x + 90 > 270 (; return 0; )
  return (x + 90).sin() + 1 * .5
)

out = false
def "checkbx" "x,y,ax,ay,bx,by" (
  ix = x > ax and x < bx
  iy = y > ay and y < by
  out = ix and iy
)

def "checkxy" "x,y,bx,by,bw,bh" (
  checkbx x y bx - bw by - bh bx + bw by + bh
)

def mid(a,b) (
  a = a.toNum()
  return a + ((b - a) / 2)
)

draw_guides = false

def "draw_brush" "b" (
  x = getx(b[1])
  y = gety(b[2])
  w = b[3] * scale
  h = b[4] * scale
  icn = "w" + (.25 * scale) + "square" + x + y + w + h
  goto 0 0
  icon icn 1

  if draw_guides (
    c text
    pen "opacity" 2
    goto 0 0; line window_width * -1 y - h window_width * 1 y - h
    goto 0 0; line x - w window_height * -1 x - w window_height * 1
    goto 0 0; line window_width * -1 y + h window_width * 1 y + h
    goto 0 0; line x + w window_height * -1 x + w window_height * 1
  )
  draw_guides = false
)

def "debug_dot" "x,y" (
  goto getx(x) gety(y)
  pen "size" 10
  pen "down"
  pen "up"
endef

def "brush_touching"
  if brushi != selected_brush (; cursor "pointer"; )

  hovered_brush = brushi
  if click (
    if selected_brush != brushi "can_interact = false"
    selected_brush = brushi
  )
)

def brush_create(arr) (
  local ax = arr[1]
  local ay = arr[2]
  local bx = arr[3]
  local by = arr[4]
  x = ax + bx / 2
  y = ay + by / 2
  w = (bx - ax * .5).abs
  h = (by - ay * .5).abs
  return [x,y,w,h,current_texture]
)

def "brush_handle" "x,y,handle,brsi,cur" (
  goto x y
  c text
  square 3 3 5
  if dragging_handle == handle "cursor cur"
  if mouse_touching (
    cursor cur
    hovered_handle = handle
    if click and can_interact (
      dragging_brush = brsi
      dragging_handle = handle
      dragging_brush_data = brushes[brsi]
    )
  )
)

def "win_buttons" (
  window.show()
  if do_win_buttons (
    direction 90
    loc -2 2 -45 -20
    square 70 17 10 : c#secondary
    change_x 25
    icon "close" 0.6 : c#text hover_size#1.1
    if mouse_touching (; cursor "pointer"; )
    if clicked (
      window "stop"
    )
    icon "down" 0.6 : chx#-25 hover_size#1.1
    if mouse_touching (; cursor "pointer"; )
    if clicked (
      window "minimise"
    )
    icon "maximise" 0.6 : chx#-25 hover_size#1.1
    if mouse_touching (; cursor "pointer"; )
    if clicked (
      window "maximise"
    )
  )
)

def "loadmap" "map" (
  map_data = map.destr
  brushes = map_data["brushes"].destr
  entities = map_data["entities"].destr
  each brushi brush brushes (
    if brush.type == "string" (
      brushes[brushi] = brush.JsonParse()
    )
  )
  each enti ent entities (
    if ent.type == "string" (
      entities[enti] = ent.JsonParse()
    )
  )
)

/* def "SEparams.getparamtype(SEtype)"
  each SEparami SEparam SEparams (
    if SEparam[1] == SEtype (
      return SEparam[2]
    )
  )
  return null
endef */

def "input_update" (
  click = mouse_down and last_down.not
  last_down = mouse_down
  middle_click = mouse_middle and last_middle_down.not() and false
  last_middle_down = mouse_middle
  right_click = mouse_right and last_right_down.not
  last_right_down = mouse_right
  delete_click = ("delete".isKeyDown() or "backspace".isKeyDown()) and last_delete_down.not
  delete_click = delete_click and hovering_ui.not
  last_delete_down = ("delete".isKeyDown() or "backspace".isKeyDown())
  enter_click = "enter".isKeyDown() and last_enter_down.not
  enter_click = enter_click and hovering_ui.not
  last_enter_down = "enter".isKeyDown()
  
  c background; pen "size" 99999999; pen "down"; pen "up"
  
  speed = delta_time * (1000 / scale)
  
  if hovering_ui.not() (
    if "w".isKeyDown() "camera_y += speed"
    if "s".isKeyDown() "camera_y -= speed"
    if "d".isKeyDown() "camera_x += speed"
    if "a".isKeyDown() "camera_x -= speed"

    if "e".isKeyDown() "scale *= delta_time * 5 + 1"
    if "q".isKeyDown() "scale /= delta_time * 5 + 1"
    
    scale *= scroll_velocity * -.0005 + 1
  )

  if "`".isKeyDown() "loadfiles"

  if right_click (
    camera_drag_x = ungetx(mouse_x)
    camera_drag_y = ungety(mouse_y)
    camera_org_x = camera_x
    camera_org_y = camera_y
  )
  if mouse_right and false (
    x = ungetx(mouse_x)
    y = ungety(mouse_y)
    camera_x = x - camera_drag_x + camera_org_x
    camera_y = y - camera_drag_y + camera_org_y
  )

  if update_selected_entity != 0 (
    selected_entity = update_selected_entity
    update_selected_entity = 0
  )

  if scale < 2 (
    scale = 2
  )

  if current_tool != "brush" "creating_brush_stage = 0"
  if current_tool != "entity" "creating_entity_stage = 0"

  mouse_wld_x = round(ungetx(mouse_x))
  mouse_wld_y = round(ungety(mouse_y))

  if delete_click (
    if selected_brush != 0 (
      brushes.delete(selected_brush)
      selected_brush = 0
    )
    if selected_entity != 0 (
      entities.delete(selected_entity)
      selected_entity = 0
    )
  )
)

def "topbar_update" (
  // top bar
  loc 9999 2 0 -15
  square window_width 40 10 : c#primary
  loc 2 2 15 -18
  text topbar_text 11 : c#text
  
  if do_topbar_fps (
    text " " + fps 11
  )
  
  if do_topbar_mouse_pos (
    text " " + mouse_wld_x 11
    text " " + mouse_wld_y 11
  )

  loop logs.len - 15 (
    logs.delete(1)
  )
)

def "state_textures" (
    texture_size = 300

    per_line = floor(window_width - 85 / texture_size)

    height = (texture_size / -2) + (floor(textures.len - 1 / per_line) * (texture_size * -1 + -20)) * -1 + (texture_size * .5)

    frame window_width * -.5 window_height * .5 - 40 (window_width * -.5 + (per_line * texture_size) + 15) window_height * -.5 + 100 height "texturescroll" : c#tertiary

    each texturei temp textures (
      texture = textures.getKeys()[texturei]

      loc 2 2 (texture_size / 2) + (texturei - 1 % per_line * texture_size) (texture_size / -2) + (floor(texturei - 1 / per_line) * (texture_size * -1 + -20)) + scroll_ytexturescroll
      col = current_texture == texture ? global_accent c#primary
      square texture_size - 20 texture_size 10 : c#col chy#-10

      if mouse_touching (
        cursor "pointer"
        if click (
          current_texture = texture
        )
      )

      square texture_size - 20 texture_size 5 : c#primary

      image textures[texture].toStr() texture_size - 20 texture_size - 20 : chy#10

      x = texture_size * -.5 + 12
      y = texture_size * -.5 + -2
      text texture 10 : c#text chx#x chy#y
    )
    frame "clear"
    loc infinity -2 0 52.5
    square window_width - 20 85 15 : c#secondary
    loc 2 -2 10 85
    text current_texture 12 : c#text

    loc -2 2 -45 -58
    square 90 30 10 : c#primary

    loc -2 2 -45 -55
    square 70 17 10 : c#secondary
    if mouse_touching "size = 12" else "size = 11"
    if mouse_touching "x = -22.2" else "x = -20"
    if mouse_touching and click (; state = "main"; )
    text "Exit" size : c#text chx#x
    if mouse_touching (; cursor "pointer"; )
  )

def "sidebar_update" (
  // sidebar
  sidebarx = window_width * .5 - 145
  sidebarheight_panel = (window_height * .5 - 45) - (window_height * -.5 + 10) - 20
  frame sidebarx - ((sidebarheight > sidebarheight_panel) ? 150 140) window_height * .5 - 45 sidebarx + 140 window_height * -.5 + 10 sidebarheight "sidebarscroll" : c#secondary
  goto 0 0
  square frame_width - 20 frame_height - 10 10 : c#primary
  if mouse_touching "hovering_ui = true"
  sidebarx = 0
  //sidebary = window_height - 70 * .5 - 33 * -1
  sidebary = frame_height / -2 - scroll_ysidebarscroll + 20
  start_sidebary = 0
  each sidebartabi sidebartab sidebar (
    goto sidebarx sidebary * -1
    square 250 20 10 : c#secondary
    author = sidebar_authors[sidebartab[1]]
    tooltip = author + ":" + sidebartab[1]
    if sidebartab.len == 2 (
      text sidebartab[2].toStr() 10 : c#text chx#-125 tooltip#tooltip
    ) else (
      icon sidebartab[3].toStr() sidebartab[4] : c#text chx#-115
      text sidebartab[2].toStr() 10 : c#text chx#17 tooltip#tooltip
    )
    sidebary += 35
    start_sidebary = sidebary

    sidebarid = sidebartab[1]
    expanded = sidebarexpanded[sidebarid]
    if sidebarexpanded.getKeys().contains(sidebarid).not() (
      expanded = false
    )

    goto sidebarx + 110 sidebary * -1 + 35
    direction 0
    if expanded (
      direction 90
    )
    icon "minimise" .8 : c#text
    square 20 20 0 0 1
    if mouse_touching (
      cursor "pointer"
      if click (
        sidebarexpanded[sidebarid] = expanded.not
      )
    )
    direction 90

    if expanded == true (
      old_sidebary = sidebary
      eventaddon "sidebar_" ++ sidebarid
      if sidebary == old_sidebary (
        sidebary += 20
        goto sidebarx + -118 sidebary * -1 + 15
        text "Sidebar tab is empty" 10 : c#text
        sidebary += 20
      )

      goto 0 0
      pen "size" 4
      line sidebarx - 125 sidebary * -1 + 25 sidebarx - 125 start_sidebary * -1 + 10 : c#secondary
    )
  )
  frame "clear"
  sidebarheight = sidebary - (frame_height / -2 - scroll_ysidebarscroll + 30) - 31
  eventaddon "gui_edt_update"
)

def "tools_update" (
  shouldntdrag = dragging_handle != ""
  shouldntdrag = shouldntdrag or dragging_brush != 0
  shouldntdrag = shouldntdrag or selected_brush != 0
  shouldntdrag = shouldntdrag or hovered_brush != 0
  shouldntdrag = shouldntdrag or hovered_handle != ""
  shouldntdrag = shouldntdrag or dragging_entity != 0
  shouldntdrag = shouldntdrag or selected_entity != 0
  shouldntdrag = shouldntdrag or hovered_entity != 0
  if mouse_down and drgtl_set and hovering_ui.not() and shouldntdrag.not() (
    brs = brush_create([drgtl_start_x,drgtl_start_y,mouse_wld_x,mouse_wld_y])
    c #006464
    draw_brush brs
    
    brsx = brs[1]
    brsy = brs[2]
    brsw = brs[3]
    brsh = brs[4]
    sbrsx = getx(brsx)
    sbrsy = gety(brsy)
    sbrsw = brsw * scale
    sbrsh = brsh * scale
    goto sbrsx + (-4.5 * (brsw * 10).len) sbrsy + sbrsh + 10
    text (brsw * 10) 9 : c#text
    goto sbrsx - sbrsw + (-9 * (brsh * 10).len) - 5 sbrsy
    text (brsh * 10) 9
  )
  if mouse_down.not() (
    drgtl_set = false
  )

  hovering_ui = false
  // tools
  loc 2 infinity 40 0
  square 54 tools.len * 60 - 5 10 : c#primary
  if mouse_touching (; hovering_ui = true; )
  each tooli tool tools (
    loc 2 infinity 40 tools.len * .5 + .5 - tooli * 60
    
    if tool[1] == current_tool (
      square 40 40 15 : c#tertiary
    ) else (
      square 40 40 15 : c#primary hover_c#secondary
    )
    if mouse_touching (; cursor "pointer"; if click (
      if current_tool == tool[1] (; current_tool = ""; ) else (; 
      current_tool = tool[1]
    ); ); )
    square 40 40 10 : c#primary
    icon tool[5].toStr() tool[4]
  )
  if current_tool == "select" (
    if click and hovering_ui.not() (
      drgtl_start_x = mouse_wld_x
      drgtl_start_y = mouse_wld_y
      drgtl_set = true
    )
  )
)

def "scene_brush_update" (
  eventaddon "gui_brush_update_early"
  hovered_brush = 0
  hovered_handle = ""
  each brushi brush brushes (
    getx brush[1]
    brsx = out
    gety brush[2]
    brsy = out
    brsw = brush[3] * scale
    brsh = brush[4] * scale
    brstext = brush[5]
    if brsx - brsw < wr and brsx + brsw > wl and brsy - brsh < wt and brsy + brsh > wb (
      col #0064b6
      // interaction detecting
      checkxy mouse_x mouse_y brsx brsy brsw + 4 brsh + 4
      int = false
      if out (
        temp = out
        checkxy mouse_x mouse_y brsx brsy brsw - 4 brsh - 4
        touching = temp and out.not
        int = out

        // brush body
        if touching (; brush_touching; )

        goto brsx brsy
        square 10 10 0 0 1 : tooltip#brstext
        if mouse_touching (; brush_touching; )
      )

      // brush body
      if brushi == selected_brush (; col #ff0000; )
      if brushi == dragging_brush (; col #0064b6; )

      if brushi == selected_brush or brushi == dragging_brush (; draw_guides = true; )

      draw_brush brush

      c cur_col

      // draw cross
      goto brsx brsy
      icon "close" .4

      // dimensions
      if brushi == selected_brush (
        goto brsx + (-4.5 * (brush[3] * 10).len) brsy + brsh + 10
        text (brush[3] * 10) 9 : c#text
        goto brsx - brsw + (-9 * (brush[4] * 10).len) - 5 brsy
        text (brush[4] * 10) 9
        ax = brsx - brsw
        ay = brsy - brsh
        bx = brsx + brsw
        by = brsy + brsh
        // corners
        brush_handle ax ay "bl" brushi "sw-resize"
        brush_handle bx ay "br" brushi "se-resize"
        brush_handle ax by "tl" brushi "nw-resize"
        brush_handle bx by "tr" brushi "ne-resize"
        // sides
        brush_handle brsx ay "b" brushi "s-resize"
        brush_handle brsx by "t" brushi "n-resize"
        brush_handle ax brsy "l" brushi "w-resize"
        brush_handle bx brsy "r" brushi "e-resize"
        if int (
          if can_interact (; cursor "move"; )
          hovered_brush = brushi
          if click and can_interact (
            dragging_handle = "drag"
            dragging_org_x = mouse_wld_x
            dragging_org_y = mouse_wld_y
            dragging_brush = brushi
            dragging_brush_data = brushes[brushi]
          )
        )
      )

      eventaddon "update_brush"
    )
  )
  // unselect brush if clicked off.
  if hovered_brush == 0 and click and hovering_ui.not() (
    selected_brush = 0
    if current_tool == "brush" (
      if creating_brush_stage == 0 (
        creating_brush_stage = 1
        creating_brush_x = mouse_wld_x
        creating_brush_y = mouse_wld_y
      )
    )
  )
  // apply brush handle movement
  if dragging_brush != 0 (
    org_x = dragging_brush_data[1]
    org_y = dragging_brush_data[2]
    org_w = dragging_brush_data[3]
    org_h = dragging_brush_data[4]
    org_txt = brushes[dragging_brush][5]
    if dragging_handle == "drag" (
      brushes[dragging_brush] = [mouse_wld_x - dragging_org_x + org_x,mouse_wld_y - dragging_org_y + org_y,org_w,org_h,org_txt]
    )
    if dragging_handle != "drag" (
      ax = org_x - org_w
      ay = org_y - org_h
      bx = org_x + org_w
      by = org_y + org_h
      if dragging_handle == "tl" (
        ax = mouse_wld_x
        by = mouse_wld_y
      )
      if dragging_handle == "t" (
        by = mouse_wld_y
      )
      if dragging_handle == "tr" (
        bx = mouse_wld_x
        by = mouse_wld_y
      )
      if dragging_handle == "r" (
        bx = mouse_wld_x
      )
      if dragging_handle == "br" (
        bx = mouse_wld_x
        ay = mouse_wld_y
      )
      if dragging_handle == "b" (
        ay = mouse_wld_y
      )
      if dragging_handle == "bl" (
        ax = mouse_wld_x
        ay = mouse_wld_y
      )
      if dragging_handle == "l" (
        ax = mouse_wld_x
      )
      brushes[dragging_brush] = [mid(ax,bx),mid(ay,by),abs(bx - ax * .5),abs(by - ay * .5),org_txt]
    )
  )
  eventaddon "gui_brush_update"
  if dragging_brush != 0 (
    c #ff0000
    draw_guides = true
    draw_brush dragging_brush_data
    c #ff0000
    x = getx(dragging_brush_data[1])
    y = gety(dragging_brush_data[2])
    goto x y
    icon "close" .4
  )
  if creating_brush_stage != 0 (
    can_interact = false
    if creating_brush_stage == 1 (
      c #007272
      brs = brush_create([creating_brush_x,creating_brush_y,mouse_wld_xa,mouse_wld_y])
      draw_guides = true
      draw_brush brs

      brsx = brs[1]
      brsy = brs[2]
      brsw = brs[3]
      brsh = brs[4]
      sbrsx = getx(brsx)
      sbrsy = gety(brsy)
      sbrsw = brsw * scale
      sbrsh = brsh * scale
      goto sbrsx + (-4.5 * (brsw * 10).len) sbrsy + sbrsh + 10
      text (brsw * 10) 9 : c#text
      goto sbrsx - sbrsw + (-9 * (brsh * 10).len) - 5 sbrsy
      text (brsh * 10) 9
    )
    if creating_brush_stage == 2 (
      brs = brush_create([creating_brush_x,creating_brush_y,creating_brush_end_x,creating_brush_end_y])
      if brs[3] != 0 and brs[4] != 0 (
        brushes.append(brs)
        selected_brush = brushes.len
      )
      creating_brush_stage = 0
    )
  )
  // brushes
  if mouse_down.not() (
    if dragging_brush != 0 (
      if "shift".isKeyDown() (
        brs = [org_x,org_y,org_w,org_h,org_txt]
        brushes.append(brs)
      )
    )
    if creating_brush_stage == 1 (
      creating_brush_stage = 2
      creating_brush_end_x = mouse_wld_x
      creating_brush_end_y = mouse_wld_y
    )
    dragging_brush = 0
    dragging_handle = ""
    dragging_entity = 0
    can_interact = true
  )
)

def "scene_entity_update" (
  ignoreents = []
  eventaddon "gui_ent_update_early"
  hovered_entity = 0
  if entities.len > 0 (
    each entityi entity entities (
      entx = getx(entity[1])
      enty = gety(entity[2])
      enttype = entity[3]
      if enttype.toStr() != "enttype" (
        goto entx enty
        col = selected_entity == entityi ? #c0c #a0a
        notignored = ignoreents.contains(entityi).not
        if notignored (
          square 1 * scale 1 * scale .5 * scale : c#col
          hov = mouse_touching
        )
        eventaddon "handle_entity"
        if hov (; cursor "pointer"; if click (
          if selected_entity != entityi (; can_interact = false; )
          selected_entity = entityi
          type = entities[selected_entity][3]
          params = entity_types[type]["params"]
          each parami param params (
            id = param[1]
            if entities[selected_entity][4].getKeys().contains(id).not() (
              e = entities[selected_entity]
              p = e[4]
              p[id] = "0"
              e[4] = p
              entities[selected_entity] = e
            )
            v = "input_" ++ id + "=" + entities[selected_entity][4][id]
            run [] + v
          )
        ); )

        change_y 1.5 * scale
        if enttype.toStr() != "enttype" and notignored (
          centext enttype .5 * scale : c#text
          if entity_types[enttype] == null (
            change_x enttype.len * (-.25 * scale) - (scale * .75)
            icon "w 5 c #ffa600 line -8 -8 0 8 cont 8 -8 cont -8 -8 w 11 dot 0 -2 w 5 c #000 line 0 5 0 0 dot 0 -6" .05 * scale : tooltip#"unknown entity type"
          )
        )

        //checkxy mouse_x mouse_y entx enty 20 20
        if hov and entityi == selected_entity (
          hovered_entity = entityi
          if can_interact (
            cursor "move"
            //log click
            if click (
              dragging_org_x = mouse_wld_x
              dragging_org_y = mouse_wld_y
              dragging_entity = entityi
              dragging_entity_data = entities[entityi]
            )
          )
        )
        eventaddon "update_entity"
      )
    )
  )
  eventaddon "gui_ent_update"
  // apply entity movement
  //log dragging_entity
  if dragging_entity != 0 (
    org_x = dragging_entity_data[1]
    org_y = dragging_entity_data[2]
    ent = entities[dragging_entity]
    ent[1] = mouse_wld_x - dragging_org_x + org_x
    ent[2] = mouse_wld_y - dragging_org_y + org_y
    entities[dragging_entity] = ent
  )
  // unselect entity if clicked off.
  if hovered_entity == 0 and click and hovering_ui.not() (
    selected_entity = 0
    if current_tool == "entity" and current_entity != "" (
      if creating_entity_stage < 2 (
        creating_entity_stage = 1
        creating_entity_x = mouse_wld_x
        creating_entity_y = mouse_wld_y
        creating_entity_type = current_entity
      )
    )
  )
  if creating_entity_stage != 0 (
    can_interact = false
    if creating_entity_stage == 1 (
      sentx = getx(creating_entity_x)
      senty = gety(creating_entity_y)

      goto sentx senty
      square 15 15 7 : c#1dff4a

      pen "size" 2

      goto sentx window_height * -1
      pen "down"
      goto sentx window_height * 1
      pen "up"

      goto window_width * -1 senty
      pen "down"
      goto window_width * 1 senty
      pen "up"

      if enter_click "creating_entity_stage = 2"
    )
    if creating_entity_stage == 2 (
      dta = {}

      type = entity_types[creating_entity_type]

      each parami param type["params"] (
        prm_id = param[1]
        prm_type = param[2]
        dta[prm_id] = null
        if param.len == 3 (
          dta[prm_id] = param[3]
        )
      )
      ent = [creating_entity_x,creating_entity_y,creating_entity_type,dta]
      void entities.append(ent)
      creating_entity_stage = 0
    )
  )
)

def "center_axis" (
  // center axis
  c #006464
  x = getx(0)
  y = gety(0)
  pen "size" 1
  goto 0 0
  line x window_height x window_height * -1
  goto 0 0
  line window_width y window_width * -1 y
)

cur_col = #000
def "col" "color" (
  c color
  cur_col = color
)

if passed_data != "" (
  file "open" passed_data
  loadmap data
)

installdefaultaddons
loadfiles

camera_x = 0
camera_y = 0
camera_org_x = 0
camera_org_y = 0
camera_drag_x = 0
cmaera_drag_y = 0

creating_brush_stage = 0
creating_brush_x = 0
creating_brush_y = 0
creating_brush_end_x = 0
creating_brush_end_y = 0

creating_entity_stage = 0
creating_entity_type = ""
creating_entity_x = 0
creating_entity_y = 0

drgtl_start_x = 0
drgtl_start_y = 0
drgtl_set = false

selected_brush = 0
selected_entity = 0
update_selected_entity = 0

dragging_brush = 0
dragging_handle = ""
dragging_entity = 0

current_tool = ""
current_texture = textures.getKeys()[1]
current_entity = ""

save "settings.cfg" "get"
if save_data["onboarding"] (

)

can_interact = false

last_delete_down = false
last_enter_down = false
last_down = false
last_middle_down = false
last_right_down = false
mainloop:
  // load the file if its opened through "open file with"
  if new_transmit (
    if transmit_source == picker_id (
      file_uuid = transmit_data
      file "open" file_uuid
      if picker_type == "open" (
        loadmap data.JsonClean().destr
        name = file[2]
        topbar_text = "Mallet -" + name ++ ".map"
      )
      new_transmit = false
    )
  )
  
  if assetqueue.len > 0 (
    while assetqueue.len > 0 (
      assetfile = assetqueue.pop()
      local assetdata = open(assetfile[1]).JsonStringify()
      each this.flag assetfile[3] (
        switch flag (
          case "json"
            assetdata = assetdata.replace("\n","").JsonParse()
            break
        )
      )
      run [assetfile[2] + "=" + assetdata.JsonStringify()]
    )
  )
  
  input_update
  
  win_w = window.width
  win_h = window.height
  wr = win_w * .5
  wl = win_w * -.5
  wt = win_h * .5
  wb = win_h * -.5
  
  switch state (
    case "textures"
      state_textures
      break
    case "main"
      center_axis
      scene_entity_update
      scene_brush_update
      tools_update
      do_sidebar = true
      break
  )
  
  if do_sidebar (
    sidebar_update
  )
  
  if do_topbar (
    topbar_update
  )
  
  //log Variables()
  
  eventaddon "gui_state_" ++ state
  
  eventaddon "gui_glb_update"
win_buttons
